STYLE CHECKER Vers 1.0
STYLE REPORT
Report generated on: 10/21/2018 12:21:01
===========================================================================
Test.java=>[Error] Line 114: This class overrides equals(Object), but does not override hashCode(). Therefore, the class may violate the invariant that equal objects must have equal hashcodes.
Test.java=>[Error] Line 31: This code compares java.lang.String objects for reference equality using the == or != operators. Unless both strings are either constants in a source file, or have been interned using the String.intern() method, the same string value may be represented by two different String objects. Consider using the equals(Object) method instead.
Test.java=>[Error] Line 32: This code compares java.lang.String objects for reference equality using the == or != operators. Unless both strings are either constants in a source file, or have been interned using the String.intern() method, the same string value may be represented by two different String objects. Consider using the equals(Object) method instead.
Test.java=>[Error] Line 38:  The method creates an IO stream object, does not assign it to any fields, pass it to other methods, or return it, and does not appear to close it on all possible exception paths out of the method. This may result in a file descriptor leak. It is generally a good idea to use a finally block to ensure that streams are closed. 
Test.java=>[Error] Line 64:  The method creates an IO stream object, does not assign it to any fields, pass it to other methods, or return it, and does not appear to close it on all possible exception paths out of the method. This may result in a file descriptor leak. It is generally a good idea to use a finally block to ensure that streams are closed. 
Test.java=>[Error] Line 81:  The method creates an IO stream object, does not assign it to any fields, pass it to other methods, or return it, and does not appear to close it on all possible exception paths out of the method. This may result in a file descriptor leak. It is generally a good idea to use a finally block to ensure that streams are closed. 
Test.java=>[Error] Line 90:  The method creates an IO stream object, does not assign it to any fields, pass it to other methods, or return it, and does not appear to close it on all possible exception paths out of the method. This may result in a file descriptor leak. It is generally a good idea to use a finally block to ensure that streams are closed. 
Test.java=>[Error] Line 101:  The method creates an IO stream object, does not assign it to any fields, pass it to other methods, or return it, and does not appear to close it on all possible exception paths out of the method. This may result in a file descriptor leak. It is generally a good idea to use a finally block to ensure that streams are closed. 
Test.java=>[Error] Line 50: This condition always produces the same result as the value of the involved variable was narrowed before. Namely, the condition or the boolean variable in if/while always returns either true or false. Probably something else was meant or condition can be removed.
Test.java=>[Error] Line 52: This condition always produces the same result as the value of the involved variable was narrowed before. Namely, the condition or the boolean variable in if/while always returns either true or false. Probably something else was meant or condition can be removed.
Test.java=>[Error] Line 58: This condition always produces the same result as the value of the involved variable was narrowed before. Namely, the condition or the boolean variable in if/while always returns either true or false. Probably something else was meant or condition can be removed.
Test.java=>[Error] Line 69: Developers usually rely on logs for error diagnostics when exceptions occur. However, sometimes, duplicate logging statements in different catch blocks of the same try block may cause debugging difficulties since the logs fail to tell which exception occurred.
Test.java=>[Error] Line 83: There is no debug message when an exception occurs, which may cause debugging difficulties.
Test.java=>[Error] Line 92: There is no debug message when an exception occurs, which may cause debugging difficulties.
Test.java=>[Error] Line 92: There is a comment such as TODO or FIXME in the catch block of exceptions.
Test.java=>[Error] Line 105: Developers are over-catching an exception (i.e., catching very high-level exceptions, such as Exception or RunTimeException), and are calling abort or System.exit() in the catch block.
